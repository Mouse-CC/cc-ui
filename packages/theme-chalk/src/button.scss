@use 'sass:map';

@use 'common/var' as *;
@use 'mixins/mixins' as *;
@use 'mixins/button' as *;
@use 'mixins/var' as *;

// bem create css sheet

@include b(button) {
  @include set-component-css-var('button', $button);
}

@include b(button) {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  line-height: 1;
  height: map.get($input-height, 'default');
  white-space: nowrap;
  color: getCssVar('button', 'text-color');
  background-color: getCssVar('button', 'bg-color');
  border: getCssVar('border');
  border-color: getCssVar('button', 'border-color');
  cursor: pointer;
  font-weight: getCssVar('button', 'font-weight');
  text-align: center;
  box-sizing: border-box;
  outline: none;
  user-select: none;
  vertical-align: middle;

  &:hover,
  &:focus {
    color: getCssVar('button', 'hover', 'text-color');
    border-color: getCssVar('button', 'hover', 'border-color');
    background-color: getCssVar('button', 'hover', 'bg-color');
    outline: none;
  }

  &:active {
    color: getCssVar('button', 'active', 'text-color');
    border-color: getCssVar('button', 'active', 'border-color');
    background-color: getCssVar('button', 'active', 'gb-color');
    outline: none;
  }

  > span {
    display: inline-flex;
    align-items: center;
  }

  & + & {
    margin-left: 12px;
  }

  & [class*='#{$namespace}-icon'] {
    & + span {
      margin-left: 6px;
    }
  }

  @include when(disabled) {
    &,
    &:hover &:focus {
      color: getCssVar('button', 'disabled', 'text-color');
      cursor: not-allowed;
      background-image: none;
      background-color: getCssVar('button', 'disabled', 'bg-color');
      border-color: getCssVar('button', 'disabled', 'border-color');
    }
  }

  @include when(round) {
    border-radius: getCssVar('border-radius', 'round');
  }

  @include when(circle) {
    width: map.get($input-height, 'default');
    border-radius: 50%;
    padding: map.get($button-padding-vertical, 'default') - $button-border-width;
  }

  @include button-size(
    map.get($button-padding-vertical, 'default') - $button-border-width,
    map.get($button-padding-horizontal, 'default') - $button-border-width,
    map.get($button-font-size, 'default'),
    map.get($button-border-radius, 'default')
  );

  @each $type in (primary, success, warning, danger, info) {
    @include m($type) {
      @include button-variant($type);
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      @include set-css-var-value(
        ('button', 'size'),
        map.get($input-height, $size)
      );

      height: getCssVar('button', 'size');

      @include button-size(
        map.get($button-padding-vertical, 'default') - $button-border-width,
        map.get($button-padding-horizontal, 'default') - $button-border-width,
        map.get($button-font-size, 'default'),
        map.get($button-border-radius, 'default')
      );

      @include when(circle) {
        width: getCssVar('button', 'size');
        padding: map.get($button-padding-vertical, $size) - $button-border-width;
      }
    }
  }
}
