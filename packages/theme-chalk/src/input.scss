@use 'sass:map';

@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use 'common/var' as *;

@mixin inset-prepend-border($color) {
  box-shadow: 1px 0 0 0 $color inset, 0 1px 0 0 $color inset,
    0 -1px 0 0 $color inset;
}

@mixin inset-append-border($color) {
  box-shadow: 0 1px 0 0 $color inset, 0 -1px 0 0 $color inset,
    -1px 0 0 0 $color inset;
}

@mixin inset-prepend-input-border($color) {
  box-shadow: 1px 0 0 0 $color inset, 1px 0 0 0 $color, 0 1px 0 0 $color inset,
    0 -1px 0 0 $color inset !important;
}

@mixin inset-append-input-border($color) {
  box-shadow: -1px 0 0 0 $color, -1px 0 0 0 $color inset, 0 1px 0 0 $color inset,
    0 -1px 0 0 $color inset !important;
}

@mixin mixed-input-border($color) {
  box-shadow: 0 0 0 1px $color inset;
}

@include b(input) {
  @include set-component-css-var('input', $input);
}

@include b(input) {
  @include css-var-from-global('input-height', 'component-size');

  position: relative;
  font-size: getCssVar('font-size', 'base');
  display: inline-flex;
  width: getCssVar('input-width');
  line-height: getCssVar('input-height');
  box-sizing: border-box;
  vertical-align: middle;

  @include e(wrapper) {
    display: inline-flex;
    flex-grow: 1;
    align-items: center;
    justify-content: center;
    padding: $border-width map.get($input-padding-horizontal, 'default')-$border-width;
    background-color: var(
      #{getCssVarName('input-bg-color')},
      map.get($input, 'bg-color')
    );
    background-image: none;
    border-radius: getCssVarWithDefault(
      'input-border-radius',
      map.get($input, 'border-radius')
    );
    cursor: text;
    @include inset-input-border(
      var(
        #{getCssVarName('input-border-color')},
        map.get($input, 'border-color')
      )
    );

    &:hover {
      @include inset-input-border(#{getCssVar('input', 'hover-border-color')});
    }

    @include when(focus) {
      @include inset-input-border(#{getCssVar('input', 'focus-border-color')});
    }
  }

  @include e(inner) {
    @include set-css-var-value(
      'input-inner-height',
      calc(
        var(
            #{getCssVarName('input-height')},
            #{map.get($input-height, 'default')}
          ) - $border-width * 2
      )
    );
    width: 100%;
    flex-grow: 1;
    -webkit-appearance: none;
    color: var(
      #{getCssVarName('input-text-color')},
      map.get($input, 'text-color')
    );
    font-size: inherit;
    height: getCssVar('input-inner-height');
    line-height: getCssVar('input-inner-height');
    padding: 0;
    outline: none;
    border: none;
    background: none;
    box-sizing: border-box;

    &:focus {
      outline: none;
    }

    &::placeholder {
      color: getCssVarWithDefault(
        'input-placeholder-color',
        map.get($input, 'placeholder-color')
      );
    }
  }

  @include when(active) {
    .#{$namespace}-input__wrapper {
      @include mixed-input-border(
        var(
          #{getCssVarName('input-focus-color')},
          map.get($input, 'focus-color')
        )
      );
    }
  }

  @include when(disabled) {
    cursor: not-allowed;

    .#{$namespace}-input__wrapper {
      background-color: map.get($input-disabled, 'fill');
      @include mixed-input-border(map.get($input-disabled, 'border'));
    }

    .#{$namespace}-input__inner {
      color: map.get($input-disabled, 'text-color');
      -webkit-text-fill-color: map.get($input-disabled, 'text-color');
      cursor: not-allowed;

      &::placeholder {
        color: map.get($input-disabled, 'placeholder-color');
      }
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      @include css-var-from-global('input-height', ('component-size', $size));

      font-size: map.get($input-font-size, $size);

      @include e(wrapper) {
        padding: $border-width map.get($input-padding-horizontal, $size)-$border-width;
      }

      @include e(inner) {
        @include set-css-var-value(
          'input-inner-height',
          calc(
            var(
                #{getCssVarName('input-height')},
                #{map.get($input-height, $size)}
              ) - $border-width * 2
          )
        );
      }
    }
  }
}
